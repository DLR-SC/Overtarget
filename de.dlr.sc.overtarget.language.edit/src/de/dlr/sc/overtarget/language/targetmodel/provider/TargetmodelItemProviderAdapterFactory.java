/**
 * Copyright (c) 2018-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.dlr.sc.overtarget.language.targetmodel.provider;

import de.dlr.sc.overtarget.language.targetmodel.util.TargetmodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TargetmodelItemProviderAdapterFactory extends TargetmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TargetmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.TargetFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetFileItemProvider targetFileItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.TargetFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetFileAdapter() {
		if (targetFileItemProvider == null) {
			targetFileItemProvider = new TargetFileItemProvider(this);
		}

		return targetFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.TargetLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetLibraryItemProvider targetLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.TargetLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetLibraryAdapter() {
		if (targetLibraryItemProvider == null) {
			targetLibraryItemProvider = new TargetLibraryItemProvider(this);
		}

		return targetLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.BaseModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseModelItemProvider baseModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.BaseModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseModelAdapter() {
		if (baseModelItemProvider == null) {
			baseModelItemProvider = new BaseModelItemProvider(this);
		}

		return baseModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.TargetModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetModelItemProvider targetModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.TargetModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetModelAdapter() {
		if (targetModelItemProvider == null) {
			targetModelItemProvider = new TargetModelItemProvider(this);
		}

		return targetModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.Unit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitItemProvider unitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.Unit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitAdapter() {
		if (unitItemProvider == null) {
			unitItemProvider = new UnitItemProvider(this);
		}

		return unitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.UrlExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlExpressionItemProvider urlExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.UrlExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlExpressionAdapter() {
		if (urlExpressionItemProvider == null) {
			urlExpressionItemProvider = new UrlExpressionItemProvider(this);
		}

		return urlExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.UrlElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlElementItemProvider urlElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.UrlElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlElementAdapter() {
		if (urlElementItemProvider == null) {
			urlElementItemProvider = new UrlElementItemProvider(this);
		}

		return urlElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.UrlElementString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlElementStringItemProvider urlElementStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.UrlElementString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlElementStringAdapter() {
		if (urlElementStringItemProvider == null) {
			urlElementStringItemProvider = new UrlElementStringItemProvider(this);
		}

		return urlElementStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.UrlElementVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlElementVariableItemProvider urlElementVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.UrlElementVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlElementVariableAdapter() {
		if (urlElementVariableItemProvider == null) {
			urlElementVariableItemProvider = new UrlElementVariableItemProvider(this);
		}

		return urlElementVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.RepositoryLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryLocationItemProvider repositoryLocationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.RepositoryLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryLocationAdapter() {
		if (repositoryLocationItemProvider == null) {
			repositoryLocationItemProvider = new RepositoryLocationItemProvider(this);
		}

		return repositoryLocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.ExcludeLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcludeLocationItemProvider excludeLocationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.ExcludeLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcludeLocationAdapter() {
		if (excludeLocationItemProvider == null) {
			excludeLocationItemProvider = new ExcludeLocationItemProvider(this);
		}

		return excludeLocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.VariableDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDefinitionItemProvider variableDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.VariableDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDefinitionAdapter() {
		if (variableDefinitionItemProvider == null) {
			variableDefinitionItemProvider = new VariableDefinitionItemProvider(this);
		}

		return variableDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.AlreadyDeclaredVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlreadyDeclaredVariableItemProvider alreadyDeclaredVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.AlreadyDeclaredVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlreadyDeclaredVariableAdapter() {
		if (alreadyDeclaredVariableItemProvider == null) {
			alreadyDeclaredVariableItemProvider = new AlreadyDeclaredVariableItemProvider(this);
		}

		return alreadyDeclaredVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.overtarget.language.targetmodel.NewVariableDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewVariableDefinitionItemProvider newVariableDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.overtarget.language.targetmodel.NewVariableDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewVariableDefinitionAdapter() {
		if (newVariableDefinitionItemProvider == null) {
			newVariableDefinitionItemProvider = new NewVariableDefinitionItemProvider(this);
		}

		return newVariableDefinitionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (targetFileItemProvider != null) targetFileItemProvider.dispose();
		if (targetLibraryItemProvider != null) targetLibraryItemProvider.dispose();
		if (baseModelItemProvider != null) baseModelItemProvider.dispose();
		if (targetModelItemProvider != null) targetModelItemProvider.dispose();
		if (unitItemProvider != null) unitItemProvider.dispose();
		if (urlExpressionItemProvider != null) urlExpressionItemProvider.dispose();
		if (urlElementItemProvider != null) urlElementItemProvider.dispose();
		if (urlElementStringItemProvider != null) urlElementStringItemProvider.dispose();
		if (urlElementVariableItemProvider != null) urlElementVariableItemProvider.dispose();
		if (repositoryLocationItemProvider != null) repositoryLocationItemProvider.dispose();
		if (excludeLocationItemProvider != null) excludeLocationItemProvider.dispose();
		if (variableDefinitionItemProvider != null) variableDefinitionItemProvider.dispose();
		if (alreadyDeclaredVariableItemProvider != null) alreadyDeclaredVariableItemProvider.dispose();
		if (newVariableDefinitionItemProvider != null) newVariableDefinitionItemProvider.dispose();
	}

}
