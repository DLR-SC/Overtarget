language: java

dist: xenial

jdk:
- oraclejdk11
 
cache:
  directories:
  - $HOME/.m2

addons:
  # -----------------------------------------------------------
  # Make the sourceforge hosts known, thus ssh connections will
  # not ask to accept the finger print of the server
  # -----------------------------------------------------------
  ssh_known_hosts: frs.sourceforge.net
  # ----------------------------------
  # Install ant for the jacoco reports
  # ----------------------------------
  apt:
     packages:
     - ant
  

install:
- true

stages:
# ------------------------------------
# Just one stage, multiple stages 
# with maven overcomplicate the things
# ------------------------------------
- name: clean-install

env:
  global:
  # -----------------------------------------------------------
  # Setup of the project name in global place. These variables
  # are used in a lot of places in this script, e.g. for
  # deployment to sourceforge etc.
  # ----------------------------------------------------------- 
  - PROJECT_NAME=OverTarget
  - PROJECT_NAME_GH=DLR-SC/Overtarget
  - PROJECT_NAME_SF=overtarget 

  # ---------------------------------------------
  # API Token for access to github
  # ---------------------------------------------
  - secure: "UQEpG33ddXR01fB6h+sFXBolWaFRfr6PyemwpiHEb0X9/FVxqsXnXdIWAHHvhWnvyC0hNtAmMu+j2jWSkoaquqmRHrN78VqMoSgN+2GWAfJ06KzTLm7ueuJKn+3BzAYskfXba7VBQz0MjmCyG7II73CNqB+u4zeIzsp76By2hzXyKpV4V2s+3i2GiSg87DKZ5Lz2R0E9aGcOqvGjk9Y1zad2RAyl+Yvf9fyK3z3wLtut+VRx6mdGeoeKHbIYnDDEPFToKY0VgmPyyMpKu9QEZM+oAFzAN7AkbSFkybELOYh5sDyFmHed66W6bzu6RJ3/3k/apPwEMTh1d99U2Te77p3rd2Vfhv0emwe3r1ICcnUXmPHmvcxM51CAg1nEqVF4EOkXdWcyprxiu4fadawChx5YuGQnUsTHTSGnCoK2Qgqon4buBLpN/KqN+3oXf7wit4L/PyqDx6ncG1y97fXrfCYPKso3Ax5aAjRJKL+iGdo+UiqZpntWysO+OAyQT3vwQQI2e9POGFiZyY7Hd6LT9i58IzgzK4t2AMah2ri060Xk91jX8p/ZjhOPIwXWv1nZPuvfkh93nTNKZIIFxTjnB8dQhd/CYqONY2Pjki5tAcRYpWAkQeJbouY3XIAsoLd7bisa/aOkh0gB0AzvtG41gSxJzbRyM267Q/EhBtZ9bMs="

after_success:
  # ---------------------------------------------
  # Dowload the codecov analysis script and 
  # execute it
  # ---------------------------------------------
  - bash <(curl -s https://codecov.io/bash)

jobs:
  include:
    
    # ***********************************************************
    # FEATURE BUILD - For all other branches, no deploy
    # ***********************************************************
    
    # -----------------------------------------------------------
    # Build job for general feature builds that do not deploy 
    # any artifacts nor create releases and tags, this is
    # applicable for master branches as well, they should only 
    # deploy when tagged.
    #------------------------------------------------------------
    - stage: clean-install
      if: branch NOT IN (integration, development, integration_snapshot, development_snapshot) AND NOT (tag =~ /^Release/)
      name: Clean Install Feature Build
      script:
      # -------------------------------------------------------
      # call the maven build and store the output in a log file
      # use this log file to analyze it for compiler warnings
      # -------------------------------------------------------
      - mvn clean install -P development,deployUnsecured -B -V | tee maven.log
      - echo "Check for warnings:"
      - cat maven.log
      - (grep -n "\[\(WARN\|WARNING\|ERROR\)\]" maven.log || exit 0  && exit 1;)
      - echo "Check for failed test cases:"
      - (grep -n "<<< FAILURE!" maven.log || exit 0 && exit 1;)
      - ant jacocoPrepareDependencies
      - ant jacocoReport 2>&1 | tee ant.log
      - (grep -n "Rule violated" ant.log || exit 0 && exit 1;)
          
    # ***********************************************************
    # DEVELOPMENT BUILD - for development branch, continous 
    # deployment and always overwriting last deployment
    # ***********************************************************
    - stage: clean-install
      if: branch = development
      name: Clean Install Deploy Development
      script:
      # -------------------------------------------------------
      # call the maven build and store the output in a log file
      # use this log file to analyze it for compiler warnings
      # -------------------------------------------------------
      - mvn clean install -P development,deployUnsecured -B -V | tee maven.log
      - echo "Check for warnings:"
      - (grep -n "\[\(WARN\|WARNING\|ERROR\)\]" maven.log || exit 0  && exit 1;)
      - echo "Check for failed test cases:"
      - (grep -n "<<< FAILURE!" maven.log || exit 0 && exit 1;)
      - ant jacocoPrepareDependencies
      - ant jacocoReport 2>&1 | tee ant.log
      - (grep -n "Rule violated" ant.log || exit 0 && exit 1;)
      before_deploy:
        # --------------------------------------
        # Start the ssh agent
        # --------------------------------------
        - eval "$(ssh-agent -s)"
        # ----------------------------------------
        # Decrypt the key for accessign the 
        # deployment store and add it to ssh-agent
        # ----------------------------------------
        - mkdir -p -m 700 /tmp/.sourceforge_ssh
        - openssl aes-256-cbc -K $encrypted_cb83e9dfc4f3_key -iv $encrypted_cb83e9dfc4f3_iv -in id_ed25519.enc -in id_ed25519.enc -out /tmp/.sourceforge_ssh/id_ed25519 -d
        - chmod 600 /tmp/.sourceforge_ssh/id_ed25519
        - ssh-add /tmp/.sourceforge_ssh/id_ed25519
        # -----------------------------------------------------------
        # Update the development tag beforehand
        # And send it back to the origin, otherwise travis will 
        # apparently perform a git fetch before, and overwrite the
        # moved tag back to the previous state.
        #------------------------------------------------------------
        - git tag -f development_snapshot
        - git remote add github-mtd  https://${GITHUB_API_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git
        - git push -f github-mtd development_snapshot
        - git remote remove github-mtd
      deploy:
        # -----------------------------------------------------------
        # Now attach the release to the newly created tag.
        # release is attached to the tag on the current commit.
        # -----------------------------------------------------------
      - provider: releases
        api_key: $GITHUB_API_TOKEN
        file_glob: true
        file:
        - deploy/unsecured/p2/**/zip/*_p2.zip
        - deploy/unsecured/bin/**/*.zip
        - deploy/unsecured/bin/**/*.tar.gz
        skip_cleanup: true
        name: $PROJECT_NAME Development Build
        body: Development build on latest commit by Travis CI - $TRAVIS_BRANCH ($TRAVIS_COMMIT) - $(date +'%F %T %Z'). This release is subject to constant change.
        prerelease: true
        overwrite: true
        target_commitish: $TRAVIS_COMMIT
        on:
          repo: $PROJECT_NAME_GH
          branch: development
      # ---------------------------------------------
      # push build to sourceforge repo for deployment
      # ---------------------------------------------    
      - provider: script
        skip_cleanup: true
        script: #
        - rsync -e ssh -avP --delete $TRAVIS_BUILD_DIR/deploy/unsecured/p2/$PROJECT_NAME/development/  dlrscmns@frs.sourceforge.net:/home/frs/project/$PROJECT_NAME_SF/development/
        on:
          repo: $PROJECT_NAME_GH
          branch: development
    
    # ***********************************************************
    # INTEGRATION BUILD - for integration branch, continous
    # deployment and overwriting same version.
    # ***********************************************************
    - stage: clean-install
      if: branch = integration
      name: Clean Install Deploy Integration
      script:
      # -------------------------------------------------------
      # call the maven build and store the output in a log file
      # use this log file to analyze it for compiler warnings
      # -------------------------------------------------------
      - mvn clean install -P integration,deployUnsecured -B -V | tee maven.log
      - echo "Check for warnings:"
      - (grep -n "\[\(WARN\|WARNING\|ERROR\)\]" maven.log || exit 0  && exit 1;)
      - echo "Check for failed test cases:"
      - (grep -n "<<< FAILURE!" maven.log || exit 0 && exit 1;)
      - ant jacocoPrepareDependencies
      - ant jacocoReport 2>&1 | tee ant.log
      - (grep -n "Rule violated" ant.log || exit 0 && exit 1;)
      before_deploy:
        # --------------------------------------
        # Start the ssh agent
        # --------------------------------------
        - eval "$(ssh-agent -s)"
        # ----------------------------------------
        # Decrypt the key for accessign the 
        # deployment store and add it to ssh-agent
        # ----------------------------------------
        - mkdir -p -m 700 /tmp/.sourceforge_ssh
        - openssl aes-256-cbc -K $encrypted_cb83e9dfc4f3_key -iv $encrypted_cb83e9dfc4f3_iv -in id_ed25519.enc -in id_ed25519.enc -out /tmp/.sourceforge_ssh/id_ed25519 -d
        - chmod 600 /tmp/.sourceforge_ssh/id_ed25519
        - ssh-add /tmp/.sourceforge_ssh/id_ed25519
        # -----------------------------------------------------------
        # Update the development tag beforehand
        # And send it back to the origin, otherwise travis will 
        # apparently perform a git fetch before, and overwrite the
        # moved tag back to the previous state.
        #------------------------------------------------------------
        - git tag -f integration_snapshot
        - git remote add github-mtd  https://${GITHUB_API_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git
        - git push -f github-mtd integration_snapshot
        - git remote remove github-mtd
      deploy:
        # -----------------------------------------------------------
        # Now attach the release to the newly created tag.
        # release is attached to the tag on the current commit.
        # -----------------------------------------------------------
      - provider: releases
        api_key: $GITHUB_API_TOKEN
        file_glob: true
        file: 
        - deploy/unsecured/p2/**/zip/*_p2.zip
        - deploy/unsecured/bin/**/*.zip
        - deploy/unsecured/bin/**/*.tar.gz
        skip_cleanup: true
        name: $PROJECT_NAME Integration Build
        body: Integration build on latest commit by Travis CI - $TRAVIS_BRANCH ($TRAVIS_COMMIT) - $(date +'%F %T %Z'). This release is subject to constant change.
        prerelease: true
        overwrite: true
        target_commitish: $TRAVIS_COMMIT
        on:
          repo: $PROJECT_NAME_GH
          branch: integration
      # ---------------------------------------------
      # push build to sourceforge repo for deployment
      # ---------------------------------------------    
      - provider: script
        skip_cleanup: true
        script: # 
        - rsync -e ssh -avP $TRAVIS_BUILD_DIR/deploy/unsecured/p2/$PROJECT_NAME/integration/  dlrscmns@frs.sourceforge.net:/home/frs/project/$PROJECT_NAME_SF/integration/
        on:
          repo: $PROJECT_NAME_GH
          branch: integration
    
    # ***********************************************************
    # RELEASE BUILD - only triggered by RELEASE_* -tags in the
    # repository, deployment always into folder with build
    # number, therefore no overwriting of previous build
    # ***********************************************************
    - stage: clean-install
      if: tag =~ /^Release/
      name: Clean Install Deploy Release
      script:
      # -------------------------------------------------------
      # call the maven build and store the output in a log file
      # use this log file to analyze it for compiler warnings
      # -------------------------------------------------------
      - mvn clean install -P release,deployBackuped -B -V | tee maven.log
      - echo "Check for warnings:"
      - (grep -n "\[\(WARN\|WARNING\|ERROR\)\]" maven.log || exit 0  && exit 1;)
      - echo "Check for failed test cases:"
      - (grep -n "<<< FAILURE!" maven.log || exit 0 && exit 1;)
      - ant jacocoPrepareDependencies
      - ant jacocoReport 2>&1 | tee ant.log
      - (grep -n "Rule violated" ant.log || exit 0 && exit 1;)
      before_deploy:
        # --------------------------------------
        # Start the ssh agent
        # --------------------------------------
        - eval "$(ssh-agent -s)"
        # ----------------------------------------
        # Decrypt the key for accessign the 
        # deployment store and add it to ssh-agent
        # ----------------------------------------
        - mkdir -p -m 700 /tmp/.sourceforge_ssh
        - openssl aes-256-cbc -K $encrypted_cb83e9dfc4f3_key -iv $encrypted_cb83e9dfc4f3_iv -in id_ed25519.enc -in id_ed25519.enc -out /tmp/.sourceforge_ssh/id_ed25519 -d
        - chmod 600 /tmp/.sourceforge_ssh/id_ed25519
        - ssh-add /tmp/.sourceforge_ssh/id_ed25519
      deploy:
        # -----------------------------------------------------------
        # Now attach the release to the Release Tag.
        # -----------------------------------------------------------
      - provider: releases
        api_key: $GITHUB_API_TOKEN
        file_glob: true
        file: 
        - deploy/secured/p2/**/zip/*_p2.zip
        - deploy/secured/bin/**/*.zip
        - deploy/secured/bin/**/*.tar.gz
        skip_cleanup: true
        name: $PROJECT_NAME Release Build
        body: Release build on latest commit by Travis CI - $TRAVIS_BRANCH ($TRAVIS_COMMIT) - $(date +'%F %T %Z'). This is a stable release.
        prerelease: true
        on:
          repo: $PROJECT_NAME_GH
          tags: true
      # ---------------------------------------------
      # push build to sourceforge repo for deployment
      # ---------------------------------------------    
      - provider: script
        skip_cleanup: true
        script: # 
        - rsync -e ssh -avP $TRAVIS_BUILD_DIR/deploy/secured/p2/$PROJECT_NAME/release/  dlrscmns@frs.sourceforge.net:/home/frs/project/$PROJECT_NAME_SF/release/
        on:
          repo: $PROJECT_NAME_GH
          tags: true
          
